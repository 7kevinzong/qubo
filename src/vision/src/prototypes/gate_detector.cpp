//hough lines for gate detection 
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <opencv2/opencv.hpp>
#include "opencv2/bgsegm.hpp"

#include <iostream>

using namespace cv;
using namespace std;

Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Mat fgMaskMOG; //fg mask fg mask generated by MOG method

Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
Ptr<BackgroundSubtractor> pMOG; //MOG Background subtractor


int keyboard; //input from keyboard

void processVideo(char* videoFilename);
Mat backgroundSubtract(Mat frame);

static void help()
{
    cout << "\nThis program demonstrates line finding with the Hough transform.\n"
            "Usage:\n"
            "./houghlines <image_name>, Default is ../data/pic1.png\n" << endl;
}


int main(int argc, char** argv)
{
    help();
    pMOG = bgsegm::createBackgroundSubtractorMOG(500,5,.925,2);
    pMOG2 = createBackgroundSubtractorMOG2(500,8,false);
    
    if(argc != 2){
        cerr <<"Incorrect input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
	processVideo(argv[1]);
    
    return 0; 
}

Mat backgroundSubtract(Mat frameIn){
    Mat gauss, mask, cdst;    
    pMOG2->apply(frameIn, fgMaskMOG2);

    //blurs the image uses the MOG2 background subtraction 
    GaussianBlur(fgMaskMOG2, gauss, Size(5,5), 0,0);
    imshow("Blur", gauss);
    // Define the structuring elements to be used in eroding and dilating the image 
    Mat se1 = getStructuringElement(MORPH_RECT, Size(5, 5));
    Mat se2 = getStructuringElement(MORPH_RECT, Size(5, 5));

    // Perform dialting and eroding helps to elminate background noise 
    morphologyEx(gauss, mask, MORPH_CLOSE, se1);
    morphologyEx(mask, mask, MORPH_OPEN, se2);
    
    // transforms mask into a binary image
    threshold(mask, mask, 100, 255, CV_THRESH_BINARY);

    return mask;
}

void processVideo(char* videoFilename) {   
	Mat dst, cdst, gauss, mask;
	VideoCapture capture;   
    if(strcmp(videoFilename, "cam") == 0){
       capture.open(0);
    }
    else{
        capture.open(videoFilename);
    }       

    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video file: " << videoFilename << endl;
        exit(EXIT_FAILURE);
    }
 
	//read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
         
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }

        mask = backgroundSubtract(frame);
        Canny(mask, dst, 50, 200, 7);
        imshow("Canny", dst);
            
        cvtColor(dst, cdst, COLOR_GRAY2BGR);
        imshow("FG Mask MOG 2", fgMaskMOG2);

        #if 0
        vector<Vec2f> lines;
            HoughLines(dst, lines, 1, CV_PI/180, 100, 0, 0 );

            for( size_t i = 0; i < lines.size(); i++ )
            {
                float rho = lines[i][0], theta = lines[i][1];
                Point pt1, pt2;
                double a = cos(theta), b = sin(theta);
                double x0 = a*rho, y0 = b*rho;
                pt1.x = cvRound(x0 + 1000*(-b));
                pt1.y = cvRound(y0 + 1000*(a));
                pt2.x = cvRound(x0 - 1000*(-b));
                pt2.y = cvRound(y0 - 1000*(a));
                line( fgMaskMOG2, pt1, pt2, Scalar(0,0,255), 3, CV_AA);
            }
        #else
            vector<Vec4i> lines;
            HoughLinesP(dst, lines, 1, CV_PI/180, 25, 25, 5 );
            cout << lines.size() << endl;
            for( size_t i = 0; i < lines.size(); i++ )
            {
                Vec4i l = lines[i];
                line( frame, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(0,0,255), 3, LINE_AA);
            }
        #endif
            imshow("source", frame);
            imshow("detected lines", frame);

        keyboard = waitKey(30);
        }
} 