#ifndef FIND_BUOY_ACTION_H
#define FIND_BUOY_ACTION_H


#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <opencv2/opencv.hpp>
#include "opencv2/bgsegm.hpp"

//C
#include <stdio.h>

//C++
#include <iostream>
#include <sstream>
#include <tuple>        // std::tuple, std::get, std::tie, std::ignore
#include <vector>

#include "vision_node.h"


class FindBuoyAction{
    public:
    FindBuoyAction(ros::NodeHandle n);
    ~FindBuoyAction();

    cv::Mat backgroundSubtract(cv::Mat cframe);
    std::vector<cv::KeyPoint> detectBuoy(cv::Mat cframe);
	float* processVideo(cv::VideoCapture capture, Server *as);
	bool updateHistory(std::vector<cv::KeyPoint> keypoints);
    
    protected:

    cv::Mat m_frame;//current frame

    cv::Mat m_fgMaskMOG;//fg mask fg mask generated by MOG method
    cv::Mat m_fgMaskMOG2;//fg mask fg mask generated by MOG2 method
    cv::Ptr<cv::BackgroundSubtractor> m_pMOG;//MOG Background subtractor
    cv::Ptr<cv::BackgroundSubtractor> m_pMOG2;//MOG2 Background subtractor
    std::vector<std::tuple<cv::Point2f, cv::Vec3b, int>> m_history;

    int m_keyboard; //input from 

    cv::Point2f m_center;

    

};

#endif
