#include "dvl_sim.h"

DVLSimNode::DVLSimNode(int argc, char **argv, int rate){
  ros::Rate loop_rate(rate);
  subscriber = n.subscribe("/g500/dvl", 1000, &DVLSimNode::dvlCallBack, this);
  publisher = n.advertise<underwater_sensor_msgs::DVL>("qubo/dvl", 1000);
};

DVLSimNode::~DVLSimNode(){};

//update: gets data about any other nodes which may be needed for the operation of this node.
void DVLSimNode::update(){
  ros::spinOnce(); //magical method which is always called during update
}

//publish: puts the information about the file into a message with the publisher.publish method.
void DVLSimNode::publish(){ //We might be able to get rid of this and always just call publisher.publish 
  publisher.publish(msg);
}


void DVLSimNode::dvlCallBack(const underwater_sensor_msgs::DVL sim_msg)
{
  msg.bi_x_axis = sim_msg.bi_x_axis;
  msg.bi_y_axis = sim_msg.bi_y_axis;
  msg.bi_z_axis = sim_msg.bi_z_axis;
}
       
